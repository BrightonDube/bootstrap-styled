var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral([' \n  ', '\n'], [' \n  ', '\n']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable quote-props, dot-notation */
/**
 * Form Component
 *
 *
 */
import React, { PropTypes } from 'react';
import styled from 'styled-components';
import { unitUtils } from 'math-utils';
import themeBs from '../../theme';
import { boxShadow } from '../../styled/mixins/box-shadow';
import { borderRadius } from '../../styled/mixins/border-radius';
import { transition } from '../../styled/mixins/transition';
import { formControlFocus, formControlValidation } from '../../styled/mixins/forms';
import { mediaBreakpointUp } from '../../styled/mixins/breakpoints';

var defaultProps = { theme: themeBs };

var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form() {
    _classCallCheck(this, Form);

    return _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
  }

  _createClass(Form, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          theme = _props.theme,
          children = _props.children,
          rest = _objectWithoutProperties(_props, ['theme', 'children']); // eslint-disable-line

      return React.createElement(
        'form',
        rest,
        children
      );
    } // eslint-disable-line react/prefer-stateless-function

  }]);

  return Form;
}(React.Component);

// eslint-disable-next-line no-class-assign


Form = styled(Form)(_templateObject, function (props) {
  return '\n    /*\n     Textual form controls\n    */ \n    &.form {\n    \n      .form {\n      \n      }\n      \n    }\n    & .form-control {\n      display: block;\n      width: 100%;\n      \n      /* Make inputs at least the height of their button counterpart (base line-height + padding + border) */\n      /* height: ' + props.theme['$input-height'] + '; */\n      \n      padding: ' + props.theme['$input-padding-y'] + ' ' + props.theme['$input-padding-x'] + ';\n      font-size: ' + props.theme['$font-size-base'] + ';\n      line-height: ' + props.theme['$input-line-height'] + ';\n      color: ' + props.theme['$input-color'] + ';\n      background-color: ' + props.theme['$input-bg'] + ';\n      \n      /* Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214. */\n      background-image: none;\n      background-clip: padding-box;\n      ' + (props.theme['$enable-rounded'] ? 'border-radius: ' + props.theme['$input-border-radius'] : 'border-radius: 0;') + '\n      border: ' + props.theme['$input-btn-border-width'] + ' solid ' + props.theme['$input-border-color'] + ';\n      ' + transition(props.theme['$enable-transitions'], 'border-color ease-in-out .15s, box-shadow ease-in-out .15s') + '\n      ' + boxShadow(props.theme['$enable-shadows'], props.theme['$input-box-shadow']) + '\n\n      /* Unstyle the caret on selects in IE10+. */\n      &::-ms-expand {\n        background-color: transparent;\n        border: 0;\n      }\n    \n      /* Customize the :focus state to imitate native WebKit styles. */\n      ' + formControlFocus(props.theme['$enable-shadows'], props.theme['$input-color-focus'], props.theme['$input-bg-focus'], props.theme['$input-border-focus'], props.theme['$input-box-shadow-focus']) + '\n    \n      /* Placeholder */\n      &::placeholder {\n        color: ' + props.theme['$input-color-placeholder'] + ';\n        /* Override Firefox\'s unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526. */\n        opacity: 1;\n      }\n    \n      /* Disabled and read-only inputs\n       HTML5 says that controls under a fieldset > legend:first-child won\'t be\n       disabled if the fieldset is disabled. Due to implementation difficulty, we\n       don\'t honor that edge case; we style them as disabled anyway.\n       */\n       \n      &:disabled,\n      &[readonly] {\n        background-color:' + props.theme['$input-bg-disabled'] + ';\n        /* iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655. */\n        opacity: 1;\n      }\n    \n      &:disabled {\n        cursor: ' + props.theme['$cursor-disabled'] + ';\n      }\n    }\n    \n    select.form-control {\n      &:not([size]):not([multiple]) {\n        height: calc(' + props.theme['$input-height'] + ' - ' + props.theme['$border-width'] + ');\n      }\n    \n      &:focus::-ms-value {\n        /* Suppress the nested default white text on blue background highlight given to\n         the selected option text when the (still closed) <select> receives focus\n         in IE and (under certain conditions) Edge, as it looks bad and cannot be made to\n         match the appearance of the native widget.\n         See https://github.com/twbs/bootstrap/issues/19398.\n         */\n        color: ' + props.theme['$input-color'] + ';\n        background-color: ' + props.theme['$input-bg'] + ';\n      }\n    }\n    \n    /* Make file inputs better match text inputs by forcing them to new lines. */\n    .form-control-file,\n    .form-control-range {\n      display: block;\n    }\n    \n    \n    /*\n     Labels\n    */\n    \n    /* For use with horizontal and inline forms, when you need the label text to */\n    /*  align with the form controls. */\n    & .col-form-label {\n      padding-top: calc(' + props.theme['$input-padding-y'] + ' - ' + props.theme['$input-btn-border-width'] + ' *2);\n      padding-bottom: calc(' + props.theme['$input-padding-y'] + ' - ' + props.theme['$input-btn-border-width'] + ' *2);\n      margin-bottom: 0; /* Override the \'<label>\' default */\n    }\n    \n    & .col-form-label-lg {\n      padding-top: calc(' + props.theme['$input-padding-y-lg'] + ' - ' + props.theme['$input-btn-border-width'] + ' *2);\n      padding-bottom: calc(' + props.theme['$input-padding-y-lg'] + ' - ' + props.theme['$input-btn-border-width'] + ' *2);\n      font-size: ' + props.theme['$font-size-lg'] + ';\n    }\n    \n    & .col-form-label-sm {\n      padding-top: calc(' + props.theme['$input-padding-y-sm'] + ' - ' + props.theme['$input-btn-border-width'] + ' *2);\n      padding-bottom: calc(' + props.theme['$input-padding-y-sm'] + ' - ' + props.theme['$input-btn-border-width'] + ' *2);\n      font-size: ' + props.theme['$font-size-sm'] + ';\n    }\n    \n    /*\n     Legends\n    */\n    \n    /* For use with horizontal and inline forms, when you need the legend text to */\n    /* be the same size as regular labels, and to align with the form controls. */\n    & .col-form-legend {\n      padding-top: ' + props.theme['$input-padding-y'] + ';\n      padding-bottom: ' + props.theme['$input-padding-y'] + ';\n      margin-bottom: 0;\n      font-size: ' + props.theme['$font-size-base'] + ';\n    }\n    \n    \n    /* Static form control text\n    \n     Apply class to an element to make any string of text align with labels in a\n     horizontal form layout.\n    */\n    \n    & .form-control-static {\n      padding-top: ' + props.theme['$input-padding-y'] + ';\n      padding-bottom: ' + props.theme['$input-padding-y'] + ';\n      line-height: ' + props.theme['$input-line-height'] + ';\n      border: solid transparent;\n      border-width: ' + props.theme['$input-btn-border-width'] + ' 0;\n    \n      &.form-control-sm,\n      &.form-control-lg {\n        padding-right: 0;\n        padding-left: 0;\n      }\n    }\n    \n    \n    /* Form control sizing\n    \n     Build on \'.form-control\' with modifier classes to decrease or increase the\n     height and font-size of form controls.\n    \n     The \'.form-group-* form-control\' variations are sadly duplicated to avoid the\n     issue documented in https://github.com/twbs/bootstrap/issues/15074.\n    */\n    \n    & .form-control-sm {\n      padding: ' + props.theme['$input-padding-y-sm'] + ' ' + props.theme['$input-padding-x-sm'] + ';\n      font-size: ' + props.theme['$font-size-sm'] + ';\n      ' + borderRadius(props.theme['$enable-rounded'], props.theme['$input-border-radius-sm']) + '\n    }\n    \n    select.form-control-sm {\n      &:not([size]):not([multiple]) {\n        height: ' + props.theme['$input-height-sm'] + ';\n      }\n    }\n    \n    & .form-control-lg {\n      padding: ' + props.theme['$input-padding-y-lg'] + ' ' + props.theme['$input-padding-x-lg'] + ';\n      font-size: ' + props.theme['$font-size-lg'] + ';\n      ' + borderRadius(props.theme['$enable-rounded'], props.theme['$input-border-radius-lg']) + '\n    }\n    \n    select.form-control-lg {\n      &:not([size]):not([multiple]) {\n        height: ' + props.theme['$input-height-lg'] + ';\n      }\n    }\n    \n    \n    /* Form groups\n     Designed to help with the organization and spacing of vertical forms. For\n     horizontal forms, use the predefined grid classes.\n    */\n    \n    &.form-group,\n     & .form-group {\n      margin-bottom: ' + props.theme['$form-group-margin-bottom'] + ';\n    }\n    \n    & .form-text {\n      display: block;\n      margin-top: ' + props.theme['$form-text-margin-top'] + '\n    }\n    \n    \n    /* Checkboxes and radios\n     Indent the labels to position radios/checkboxes as hanging controls.\n    */\n    \n    &.form-check,\n    & .form-check {\n      position: relative;\n      display: block;\n      margin-bottom: ' + props.theme['$form-check-margin-bottom'] + ';\n    \n      &.disabled {\n        .form-check-label {\n          color: ' + props.theme['$text-muted'] + ';\n          cursor: ' + props.theme['$cursor-disabled'] + ';\n        }\n      }\n    }\n    \n    & .form-check-label {\n      padding-left: ' + props.theme['$form-check-input-gutter'] + ';\n      margin-bottom: 0; /* Override default \'<label>\' bottom margin */\n      cursor: pointer;\n    }\n    \n    & .form-check-input {\n      position: absolute;\n      margin-top: .' + props.theme['$form-check-input-margin-y'] + ';\n      margin-left: ' + props.theme['$form-check-input-gutter'] + ';\n    \n      &:only-child {\n        position: static;\n      }\n    }\n    \n    /*  Radios and checkboxes on same line */\n    & .form-check-inline {\n      display: inline-block;    \n      .form-check-label {\n        vertical-align: middle;\n      }\n      \n      + .form-check-inline {\n        margin-left: ' + props.theme['$form-check-inline-margin-x'] + ';\n      }\n    \n      &.disabled {\n        color: ' + props.theme['$text-muted'] + ';\n        cursor: ' + props.theme['$cursor-disabled'] + ';\n      }\n    }\n    \n    \n    /* Form control feedback states\n     Apply contextual and semantic states to individual form controls.\n    */\n    & .form-control-feedback {\n      margin-top: ' + props.theme['$form-feedback-margin-top'] + ';\n    }\n    \n    & .form-control-success,\n    & .form-control-warning,\n    & .form-control-danger {\n      padding-right: ' + unitUtils.math.multiply(props.theme['$input-padding-x'], 3) + ';\n      background-repeat: no-repeat;\n      background-position: center right ' + unitUtils.math.divide(props.theme['$input-height'], 4) + ';\n      background-size: ' + unitUtils.math.divide(props.theme['$input-height'], 2) + ' ' + unitUtils.math.divide(props.theme['$input-height'], 2) + ';\n    }\n    \n    /* Form validation states */\n    &.has-success {\n      ' + formControlValidation(props.theme['$enable-shadows'], props.theme['$brand-success'], props.theme['$box-shadow']) + '\n    \n      .form-control-success {\n        background-image: ' + props.theme['$form-icon-success'] + ';\n      }\n    }\n    \n    &.has-warning {\n      ' + formControlValidation(props.theme['$enable-shadows'], props.theme['$brand-warning'], props.theme['$box-shadow']) + '\n          \n      .form-control-warning {\n        background-image: ' + props.theme['$form-icon-warning'] + ';\n      }\n    }\n    \n    &.has-danger {\n      ' + formControlValidation(props.theme['$enable-shadows'], props.theme['$brand-danger'], props.theme['$box-shadow']) + '\n    \n      .form-control-danger {\n        background-image: ' + props.theme['$form-icon-danger'] + ';\n      }\n    }\n    \n    \n    /* Inline forms\n    \n     Make forms appear inline(-block) by adding the \'.form-inline\' class. Inline\n     forms begin stacked on extra small (mobile) devices and then go inline when\n     viewports reach <768px.\n    \n     Requires wrapping inputs and labels with \'.form-group\' for proper display of\n     default HTML form controls and our custom form controls (e.g., input groups).\n    */\n    \n    &.form-inline {\n      display: flex;\n      flex-flow: row-wrap;\n        .form-check {\n          width: 100%;\n        }\n    \n      /* Kick in the inline */\n      ' + mediaBreakpointUp('sm', props.theme['$grid-breakpoints'], '\n          .label {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-bottom: 0;\n          }\n          \n          /* Inline-block all the things for \'inline\' */\n          .form-group {\n            display: flex;\n            flex: 0 0 auto;\n            flex-flow: row wrap;\n            margin-bottom: 0;\n          }\n      \n          /* Allow folks to *not* use \'.form-group\' */\n          .form-control {\n            display: inline-block;\n            width: auto; /* Prevent labels from stacking above inputs in \'.form-group\' */\n            vertical-align: middle;\n          }\n      \n          /* Make static controls behave like regular ones */\n          .form-control-static {\n            display: inline-block;\n          }\n      \n          .input-group {\n            width: auto;\n          }\n          \n          .form-control-label {\n             margin-bottom: 0;\n            vertical-align: middle;\n          }\n      \n          /* Remove default margin on radios/checkboxes that were used for stacking, and */\n          /*  then undo the floating of radios and checkboxes to match. */\n          .form-check {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: auto;\n            margin-top: 0;\n            margin-bottom: 0;\n          }\n          .form-check-label {\n            padding-left: 0;\n          }\n          .form-check-input {\n            position: relative;\n            margin-left: 0;\n            margin-top: 0;\n            ' + props.theme['$form-feedback-margin-top'] + '\n          }\n          \n          /* Custom form controls */\n          .custom-control {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding-left: 0;\n          }\n          \n          .custom-control-indicator {\n            position: static;\n            display: inline-block;\n            margin-right: ' + props.theme['$form-check-input-margin-x'] + '; /* Flexbox alignment means we lose our HTML space here, so we compensate. */\n            vertical-align: text-bottom;\n          }\n          \n          /* Re-override the feedback icon. */\n          .has-feedback .form-control-feedback {\n            top: 0;\n          }\n\n        ') + '\n    }\n \n  ';
});

Form.defaultProps = defaultProps;

export default Form;