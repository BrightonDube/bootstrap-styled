var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral([' \n  ', '\n'], [' \n  ', '\n']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable quote-props, dot-notation */
/**
 * Form Component
 *
 *
 */
import React, { PropTypes } from 'react';
import styled from 'styled-components';
import theme from '../../config';
import { boxShadow } from '../../styled/mixins/box-shadow';
import { borderRadius } from '../../styled/mixins/border-radius';
import { transition } from '../../styled/mixins/transition';
import { formControlFocus, formControlValidation } from '../../styled/mixins/forms';
import { mediaBreakpointUp } from '../../styled/mixins/breakpoints';
import { makeRow } from '../../styled/mixins/grid';
import { makeGridColumns } from '../../styled/mixins/grid-framework';
import { math } from '../../styled/mixins/unit';

var defaultProps = { theme: theme };

var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form() {
    _classCallCheck(this, Form);

    return _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
  }

  _createClass(Form, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          action = _props.action,
          onSubmit = _props.onSubmit;


      return _jsx('form', {
        className: className,
        action: action,
        onSubmit: onSubmit
      }, void 0, children);
    } // eslint-disable-line react/prefer-stateless-function

  }]);

  return Form;
}(React.Component);

// eslint-disable-next-line no-class-assign


Form = styled(Form)(_templateObject, function (props) {
  return '\n    /*\n     Textual form controls\n    */ \n    \n    & .form-control {\n      display: block;\n      width: 100%;\n      \n      /* Make inputs at least the height of their button counterpart (base line-height + padding + border) */\n      /* height: ' + props.theme['$input-height'] + '; */\n      \n      padding: ' + props.theme['$input-padding-y'] + ' ' + props.theme['$input-padding-x'] + ';\n      font-size: ' + props.theme['$font-size-base'] + ';\n      line-height: ' + props.theme['$input-line-height'] + ';\n      color: ' + props.theme['$input-color'] + ';\n      background-color: ' + props.theme['$input-bg'] + ';\n      \n      /* Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214. */\n      background-image: none;\n      background-clip: padding-box;\n      ' + (props.theme['$enable-rounded'] ? '\n        border-radius: ' + props.theme['$input-border-radius'] + '\n      ' : ' \n        border-radius: 0;\n      ') + '\n      border: ' + props.theme['$input-btn-border-width'] + ' solid ' + props.theme['$input-border-color'] + ';\n      ' + transition(props.theme['$enable-transitions'], 'border-color ease-in-out .15s, box-shadow ease-in-out .15s') + '\n      ' + boxShadow(props.theme['$enable-shadows'], props.theme['$input-box-shadow']) + '\n\n      /* Unstyle the caret on selects in IE10+. */\n      &::-ms-expand {\n        background-color: transparent;\n        border: 0;\n      }\n    \n      /* Customize the :focus state to imitate native WebKit styles. */\n      ' + formControlFocus(props.theme['$enable-shadows'], props.theme['$input-color-focus'], props.theme['$input-bg-focus'], props.theme['$input-border-focus'], props.theme['$input-box-shadow-focus']) + '\n    \n      /* Placeholder */\n      &::placeholder {\n        color: ' + props.theme['$input-color-placeholder'] + ';\n        /* Override Firefox\'s unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526. */\n        opacity: 1;\n      }\n    \n      /* Disabled and read-only inputs\n       HTML5 says that controls under a fieldset > legend:first-child won\'t be\n       disabled if the fieldset is disabled. Due to implementation difficulty, we\n       don\'t honor that edge case; we style them as disabled anyway.\n       */\n       \n      &:disabled,\n      &[readonly] {\n        background-color:' + props.theme['$input-bg-disabled'] + ';\n        /* iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655. */\n        opacity: 1;\n      }\n    \n      &:disabled {\n        cursor: ' + props.theme['$cursor-disabled'] + ';\n      }\n    }\n    \n    select.form-control {\n      &:not([size]):not([multiple]) {\n        height: calc(' + props.theme['$input-height'] + ' - ' + props.theme['$border-width'] + ');\n      }\n    \n      &:focus::-ms-value {\n        /* Suppress the nested default white text on blue background highlight given to\n         the selected option text when the (still closed) <select> receives focus\n         in IE and (under certain conditions) Edge, as it looks bad and cannot be made to\n         match the appearance of the native widget.\n         See https://github.com/twbs/bootstrap/issues/19398.\n         */\n        color: ' + props.theme['$input-color'] + ';\n        background-color: ' + props.theme['$input-bg'] + ';\n      }\n    }\n    \n    /* Make file inputs better match text inputs by forcing them to new lines. */\n    .form-control-file,\n    .form-control-range {\n      display: block;\n    }\n    \n    \n    /*\n     Labels\n    */\n    \n    /* For use with horizontal and inline forms, when you need the label text to */\n    /*  align with the form controls. */\n    & .col-form-label {\n      padding-top: ' + props.theme['$input-padding-y'] + ';\n      padding-bottom: ' + props.theme['$input-padding-y'] + ';\n      margin-bottom: 0; /* Override the \'<label>\' default */\n    }\n    \n    & .col-form-label-lg {\n      padding-top: ' + props.theme['$input-padding-y-lg'] + ';\n      padding-bottom: ' + props.theme['$input-padding-y-lg'] + ';\n      font-size: ' + props.theme['$font-size-lg'] + ';\n    }\n    \n    & .col-form-label-sm {\n      padding-top: ' + props.theme['$input-padding-y-sm'] + ';\n      padding-bottom: ' + props.theme['$input-padding-y-sm'] + ';\n      font-size: ' + props.theme['$font-size-sm'] + ';\n    }\n    \n    \n    /*\n     Legends\n    */\n    \n    /* For use with horizontal and inline forms, when you need the legend text to */\n    /* be the same size as regular labels, and to align with the form controls. */\n    & .col-form-legend {\n      padding-top: ' + props.theme['$input-padding-y'] + ';\n      padding-bottom: ' + props.theme['$input-padding-y'] + ';\n      margin-bottom: 0;\n      font-size: ' + props.theme['$font-size-base'] + ';\n    }\n    \n    \n    /* Static form control text\n    \n     Apply class to an element to make any string of text align with labels in a\n     horizontal form layout.\n    */\n    \n    & .form-control-static {\n      padding-top: ' + props.theme['$input-padding-y'] + ';\n      padding-bottom: ' + props.theme['$input-padding-y'] + ';\n      line-height: ' + props.theme['$input-line-height'] + ';\n      border: solid transparent;\n      border-width: 1px 0;\n    \n      &.form-control-sm,\n      &.form-control-lg {\n        padding-right: 0;\n        padding-left: 0;\n      }\n    }\n    \n    \n    /* Form control sizing\n    \n     Build on \'.form-control\' with modifier classes to decrease or increase the\n     height and font-size of form controls.\n    \n     The \'.form-group-* form-control\' variations are sadly duplicated to avoid the\n     issue documented in https://github.com/twbs/bootstrap/issues/15074.\n    */\n    \n    & .form-control-sm {\n      padding: ' + props.theme['$input-padding-y-sm'] + ' ' + props.theme['$input-padding-x-sm'] + ';\n      font-size: ' + props.theme['$font-size-sm'] + ';\n      ' + borderRadius(props.theme['$enable-rounded'], props.theme['$input-border-radius-sm']) + '\n    }\n    \n    select.form-control-sm {\n      &:not([size]):not([multiple]) {\n        height: ' + props.theme['$input-height-sm'] + ';\n      }\n    }\n    \n    & .form-control-lg {\n      padding: ' + props.theme['$input-padding-y-lg'] + ' ' + props.theme['$input-padding-x-lg'] + ';\n      font-size: ' + props.theme['$font-size-lg'] + ';\n      ' + borderRadius(props.theme['$enable-rounded'], props.theme['$input-border-radius-lg']) + '\n    }\n    \n    select.form-control-lg {\n      &:not([size]):not([multiple]) {\n        height: ' + props.theme['$input-height-lg'] + ';\n      }\n    }\n    \n    \n    /* Form groups\n     Designed to help with the organization and spacing of vertical forms. For\n     horizontal forms, use the predefined grid classes.\n    */\n    \n    &.form-group,\n     & .form-group {\n      margin-bottom: ' + props.theme['$form-group-margin-bottom'] + ';\n    }\n    \n    & .form-text {\n      display: block;\n      margin-top: ' + math.multiply(props.theme['$spacer'], 0.25) + '\n    }\n    \n    \n    /* Checkboxes and radios\n     Indent the labels to position radios/checkboxes as hanging controls.\n    */\n    \n    &.form-check,\n    & .form-check {\n      position: relative;\n      display: block;\n      margin-bottom: ' + math.multiply(props.theme['$spacer'], 0.75) + ';\n    \n      /* Move up sibling radios or checkboxes for tighter spacing */\n      + .form-check {\n        margin-top: -.25rem;\n      }\n    \n      &.disabled {\n        .form-check-label {\n          color: ' + props.theme['$text-muted'] + ';\n          cursor: ' + props.theme['$cursor-disabled'] + ';\n        }\n      }\n    }\n    \n    & .form-check-label {\n      padding-left: 1.25rem;\n      margin-bottom: 0; /* Override default \'<label>\' bottom margin */\n      cursor: pointer;\n    }\n    \n    & .form-check-input {\n      position: absolute;\n      margin-top: .25rem;\n      margin-left: -1.25rem;\n    \n      &:only-child {\n        position: static;\n      }\n    }\n    \n    /*  Radios and checkboxes on same line */\n    & .form-check-inline {\n      position: relative;\n      display: inline-block;\n      padding-left: 1.25rem;\n      margin-bottom: 0; /* Override default \'<label>\' bottom margin */\n      vertical-align: middle;\n      cursor: pointer;\n    \n      + .form-check-inline {\n        margin-left: .75rem;\n      }\n    \n      &.disabled {\n        color: ' + props.theme['$text-muted'] + ';\n        cursor: ' + props.theme['$cursor-disabled'] + ';\n      }\n    }\n    \n    \n    /* Form control feedback states\n     Apply contextual and semantic states to individual form controls.\n    */\n    & .form-control-feedback {\n      margin-top: ' + math.multiply(props.theme['$spacer'], 0.25) + ';\n    }\n    \n    & .form-control-success,\n    & .form-control-warning,\n    & .form-control-danger {\n      padding-right: ' + math.multiply(props.theme['$input-padding-x'], 3) + ';\n      background-repeat: no-repeat;\n      background-position: center right ' + math.divide(props.theme['$input-height'], 4) + ';\n      background-size: ' + math.divide(props.theme['$input-height'], 2) + ' ' + math.divide(props.theme['$input-height'], 2) + ';\n    }\n    \n    /* Form validation states */\n    &.has-success {\n      ' + formControlValidation(props.theme['$enable-shadows'], props.theme['$brand-success'], props.theme['$box-shadow']) + '\n    \n      .form-control-success {\n        background-image: ' + props.theme['$form-icon-success'] + ';\n      }\n    }\n    \n    &.has-warning {\n      ' + formControlValidation(props.theme['$enable-shadows'], props.theme['$brand-warning'], props.theme['$box-shadow']) + '\n          \n      .form-control-warning {\n        background-image: ' + props.theme['$form-icon-warning'] + ';\n      }\n    }\n    \n    &.has-danger {\n      ' + formControlValidation(props.theme['$enable-shadows'], props.theme['$brand-danger'], props.theme['$box-shadow']) + '\n    \n      .form-control-danger {\n        background-image: ' + props.theme['$form-icon-danger'] + ';\n      }\n    }\n    \n    \n    /* Inline forms\n    \n     Make forms appear inline(-block) by adding the \'.form-inline\' class. Inline\n     forms begin stacked on extra small (mobile) devices and then go inline when\n     viewports reach <768px.\n    \n     Requires wrapping inputs and labels with \'.form-group\' for proper display of\n     default HTML form controls and our custom form controls (e.g., input groups).\n    */\n    \n    &.form-inline {\n    \n      /* Kick in the inline */\n      ' + mediaBreakpointUp('sm', props.theme['$grid-breakpoints'], '\n        /* Inline-block all the things for \'inline\' */\n        .form-group {\n          display: inline-block;\n          margin-bottom: 0;\n          vertical-align: middle;\n        }\n    \n        /* Allow folks to *not* use \'.form-group\' */\n        .form-control {\n          display: inline-block;\n          width: auto; /* Prevent labels from stacking above inputs in \'.form-group\' */\n          vertical-align: middle;\n        }\n    \n        /* Make static controls behave like regular ones */\n        .form-control-static {\n          display: inline-block;\n        }\n    \n        .input-group {\n          display: inline-table;\n          width: auto;\n          vertical-align: middle;\n    \n          .input-group-addon,\n          .input-group-btn,\n          .form-control {\n            width: auto;\n          }\n        }\n    \n        /* Input groups need that 100% width though */\n        .input-group > .form-control {\n          width: 100%;\n        }\n    \n        .form-control-label {\n          margin-bottom: 0;\n          vertical-align: middle;\n        }\n    \n        /* Remove default margin on radios/checkboxes that were used for stacking, and */\n        /*  then undo the floating of radios and checkboxes to match. */\n        .form-check {\n          display: inline-block;\n          margin-top: 0;\n          margin-bottom: 0;\n          vertical-align: middle;\n        }\n        .form-check-label {\n          padding-left: 0;\n        }\n        .form-check-input {\n          position: relative;\n          margin-left: 0;\n        }\n    \n        /* Re-override the feedback icon. */\n        .has-feedback .form-control-feedback {\n          top: 0;\n        }\n      ') + '\n    }\n    \n\n    /* Embedded icons from Open Iconic.\n     Released under MIT and copyright 2014 Waybury.\n     https://useiconic.com/open\n    */\n    \n    /* \n    Checkboxes and radios\n    Base class takes care of all the key behavioral aspects.\n    */\n    \n    & .custom-control {\n      position: relative;\n      display: inline-block;\n      padding-left: ' + props.theme['$custom-control-gutter'] + ';\n      cursor: pointer;\n    \n      + .custom-control {\n        margin-left: ' + props.theme['$custom-control-spacer-x'] + ';\n      }\n    }\n    \n    & .custom-control-input {\n      position: absolute;\n      z-index: -1; /* Put the input behind the label so it doesn\'t overlay text */\n      opacity: 0;\n    \n      &:checked ~ .custom-control-indicator {\n        color: ' + props.theme['$custom-control-checked-indicator-color'] + ';\n        background-color: ' + props.theme['$custom-control-checked-indicator-bg'] + ';\n        ' + boxShadow(props.theme['$enable-shadows'], props.theme['$custom-control-checked-indicator-box-shadow']) + '\n      }\n    \n      &:focus ~ .custom-control-indicator {\n        /* the mixin is not used here to make sure there is feedback */\n        box-shadow: ' + props.theme['$custom-control-focus-indicator-box-shadow'] + ';\n      }\n    \n      &:active ~ .custom-control-indicator {\n        color: ' + props.theme['$custom-control-active-indicator-color'] + ';\n        background-color: ' + props.theme['$custom-control-active-indicator-bg'] + ';\n        ' + boxShadow(props.theme['$enable-shadows'], props.theme['$custom-control-active-indicator-box-shadow']) + '\n      }\n    \n      &:disabled {\n        ~ .custom-control-indicator {\n          cursor: ' + props.theme['$custom-control-disabled-cursor'] + ';\n          background-color: ' + props.theme['$custom-control-disabled-indicator-bg'] + ';\n        }\n    \n        ~ .custom-control-description {\n          color: ' + props.theme['$custom-control-disabled-description-color'] + ';\n          cursor: ' + props.theme['$custom-control-disabled-cursor'] + ';\n        }\n      }\n    }\n    \n    /* Custom indicator\n    \n    Generates a shadow element to create our makeshift checkbox/radio background.\n    */\n    \n    & .custom-control-indicator {\n      position: absolute;\n      top: .25rem;\n      left: 0;\n      display: block;\n      width: ' + props.theme['$custom-control-indicator-size'] + ';\n      height: ' + props.theme['$custom-control-indicator-size'] + ';\n      pointer-events: none;\n      user-select: none;\n      background-color: ' + props.theme['$custom-control-indicator-bg'] + ';\n      background-repeat: no-repeat;\n      background-position: center center;\n      background-size: ' + props.theme['$custom-control-indicator-bg-size'] + ';\n      ' + boxShadow(props.theme['$enable-shadows'], props.theme['$custom-control-indicator-box-shadow']) + '\n    }\n    \n    /* Checkboxes\n    \n    Tweak just a few things for checkboxes.\n    */\n    \n    & .custom-checkbox {\n      .custom-control-indicator {\n        ' + borderRadius(props.theme['$enable-rounded'], props.theme['$custom-checkbox-radius']) + '\n      }\n    \n      .custom-control-input:checked ~ .custom-control-indicator {\n        background-image: ' + props.theme['$custom-checkbox-checked-icon'] + ';\n      }\n    \n      .custom-control-input:indeterminate ~ .custom-control-indicator {\n        background-color: ' + props.theme['$custom-checkbox-indeterminate-bg'] + ';\n        background-image: ' + props.theme['$custom-checkbox-indeterminate-icon'] + ';\n        ' + boxShadow(props.theme['$enable-shadows'], props.theme['$custom-checkbox-indeterminate-box-shadow']) + '\n      }\n    }\n    \n    /* Radios\n    \n    Tweak just a few things for radios.\n    */\n    & .custom-radio {\n      .custom-control-indicator {\n        border-radius: ' + props.theme['$custom-radio-radius'] + ';\n      }\n    \n      .custom-control-input:checked ~ .custom-control-indicator {\n        background-image: ' + props.theme['$custom-radio-checked-icon'] + ';\n      }\n    }\n    \n    \n    /* Layout options\n    \n     By default radios and checkboxes are \'inline-block\' with no additional spacing\n     set. Use these optional classes to tweak the layout.\n    */\n    & .custom-controls-stacked {\n      .custom-control {\n        float: left;\n        clear: left;\n    \n        + .custom-control {\n          margin-left: 0;\n        }\n      }\n    }\n    \n    \n    /* Select\n    \n     Replaces the browser default select with a custom one, mostly pulled from\n     http://primercss.io.\n    \n     Includes IE9-specific hacks (noted by \' 9\').\n    */\n    \n    & .custom-select {\n      display: inline-block;\n      max-width: 100%;\n      height: calc(#{$input-height} - #{$select-border-width});\n      padding: ' + props.theme['$custom-select-padding-y'] + ' (' + props.theme['$custom-select-padding-x'] + ' + ' + props.theme['$custom-select-indicator-padding'] + ') ' + props.theme['$custom-select-padding-y'] + ' ' + props.theme['$custom-select-padding-x'] + ';\n      padding-right: ' + props.theme['$custom-select-padding-x'] + ' /*9 */;\n      color: ' + props.theme['$custom-select-color'] + ';\n      vertical-align: middle;\n      background: ' + props.theme['$custom-select-bg'] + ' ' + props.theme['$custom-select-indicator'] + ' no-repeat right ' + props.theme['$custom-select-padding-x'] + ' center;\n      background-image: none /* 9 */; \n      background-size: ' + props.theme['$custom-select-bg-size'] + ';\n      border: ' + props.theme['$custom-select-border-width'] + ' solid ' + props.theme['$custom-select-border-color'] + ';\n      ' + borderRadius(props.theme['$enable-rounded'], props.theme['$custom-select-border-radius']) + '\n      /* Use vendor prefixes as \'appearance\' isn\'t part of the CSS spec. */\n      -moz-appearance: none;\n      -webkit-appearance: none;\n    \n      &:focus {\n        border-color: ' + props.theme['$custom-select-focus-border-color'] + ';\n        outline: none;\n        ' + boxShadow(props.theme['$enable-shadows'], props.theme['$custom-select-focus-box-shadow']) + '\n    \n        &::-ms-value {\n          // For visual consistency with other platforms/browsers,\n          // supress the default white text on blue background highlight given to\n          // the selected option text when the (still closed) <select> receives focus\n          // in IE and (under certain conditions) Edge.\n          // See https://github.com/twbs/bootstrap/issues/19398.\n          color: ' + props.theme['$input-color'] + ';\n          background-color: ' + props.theme['$input-bg'] + ';\n        }\n      }\n    \n      &:disabled {\n        color: ' + props.theme['$custom-select-disabled-color'] + ';\n        cursor: ' + props.theme['$cursor-disabled'] + ';\n        background-color: ' + props.theme['$custom-select-disabled-bg'] + ';\n      }\n    \n      /* Hides the default caret in IE11 */\n      &::-ms-expand {\n        opacity: 0;\n      }\n    }\n    \n    & .custom-select-sm {\n      padding-top: ' + props.theme['$custom-select-padding-y'] + ';\n      padding-bottom: ' + props.theme['$custom-select-padding-y'] + ';\n      font-size: ' + props.theme['$custom-select-sm-font-size'] + ';\n    \n      /* &:not([multiple]) {\n         height: 26px;\n         min-height: 26px;\n       }\n       */\n    }\n    \n    \n    /* File\n    Custom file input.\n    */ \n    \n    & .custom-file {\n      position: relative;\n      display: inline-block;\n      max-width: 100%;\n      height: ' + props.theme['$custom-file-height'] + ';\n      cursor: pointer;\n    }\n    \n    & .custom-file-input {\n      min-width: ' + props.theme['$custom-file-width'] + ';\n      max-width: 100%;\n      margin: 0;\n      filter: alpha(opacity = 0);\n      opacity: 0;\n    \n      &:focus ~ .custom-file-control {\n        ' + boxShadow(props.theme['$enable-shadows'], props.theme['$custom-file-focus-box-shadow']) + '\n      }\n    }\n    \n    & .custom-file-control {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      z-index: 5;\n      height: ' + props.theme['$custom-file-height'] + ';\n      padding: ' + props.theme['$custom-file-padding-x'] + ' ' + props.theme['$custom-file-padding-y'] + ';\n      line-height: ' + props.theme['$custom-file-line-height'] + ';\n      color: ' + props.theme['$custom-file-color'] + ';\n      user-select: none;\n      background-color: ' + props.theme['$custom-file-bg'] + ';\n      border: ' + props.theme['$custom-file-border-width'] + ' solid ' + props.theme['$custom-file-border-color'] + ';\n      ' + borderRadius(props.theme['$enable-rounded'], props.theme['$custom-file-border-radius']) + '\n      ' + boxShadow(props.theme['$enable-shadows'], props.theme['$custom-file-box-shadow']) + '\n    \n      /* @each $lang, $text in map-get($custom-file-text, placeholder) {\n        &:lang(#{$lang})::after {\n          content: $text;\n        }\n      }\n      */\n    \n      &::before {\n        position: absolute;\n        top: -' + props.theme['$custom-file-border-width'] + ';\n        right: -' + props.theme['$custom-file-border-width'] + ';\n        bottom: -' + props.theme['$custom-file-border-width'] + ';\n        z-index: 6;\n        display: block;\n        height: ' + props.theme['$custom-file-height'] + ';\n        padding: ' + props.theme['$custom-file-padding-x'] + ' ' + props.theme['$custom-file-padding-y'] + ';\n        line-height: ' + props.theme['$custom-file-line-height'] + ';\n        color: ' + props.theme['$custom-file-button-color'] + ';\n        background-color: ' + props.theme['$custom-file-button-bg'] + ';\n        border: ' + props.theme['$custom-file-border-width'] + ' solid ' + props.theme['$custom-file-border-color'] + ';\n        ' + borderRadius(props.theme['$enable-rounded'], '\n            0 ' + props.theme['$custom-file-border-radius'] + ' ' + props.theme['$custom-file-border-radius'] + ' 0\n          ') + '\n      }\n    \n      /* @each $lang, $text in map-get($custom-file-text, button-label) {\n        &:lang(#{$lang})::before {\n          content: $text;\n        }\n      }\n      */\n    }\n\n    &.row,\n    & .row{\n      ' + makeRow(props.theme['$enable-flex'], props.theme['$enable-grid-classes'], props.theme['$grid-gutter-widths']) + '\n    }\n    ' + makeGridColumns(props.theme['$enable-flex'], props.theme['$enable-grid-classes'], props.theme['$grid-columns'], props.theme['$grid-gutter-widths'], props.theme['$grid-breakpoints']) + '\n    \n  ';
});

Form.defaultProps = defaultProps;

export default Form;