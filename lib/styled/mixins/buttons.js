import color from 'color';
import theme from 'theme';
import { borderRadius } from './border-radius';
import { hover, hoverFocus } from './hover';
import { boxShadow } from './box-shadow';
import { transition } from './transition';
import { tabFocus } from './tab-focus';
export var defaultProps = theme;

export function buttonVariant() {
  var enableShadows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-shadows'];
  var buttonColor = arguments[1];
  var background = arguments[2];
  var border = arguments[3];
  var btnActiveBoxShadow = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultProps['$btn-active-box-shadow'];

  var activeBackground = color(background).darken(0.1).toString();
  var activeBorder = color(border).darken(0.12).toString();

  return '\n    color: ' + buttonColor + ';\n    background-color: ' + background + ';\n    border-color: ' + border + ';\n    ' + boxShadow(enableShadows, btnActiveBoxShadow) + ';\n  \n    ' + hover('\n      color: ' + buttonColor + ';\n      background-color: ' + activeBackground + ';\n          border-color: ' + activeBorder + ';\n    ') + '\n  \n    &:focus,\n    &.focus {\n      color: ' + buttonColor + ';\n      background-color: ' + activeBackground + ';\n          border-color: ' + activeBorder + ';\n    }\n  \n    &:active,\n    &.active,\n    .open > &.dropdown-toggle {\n      color: ' + buttonColor + ';\n      background-color: ' + activeBackground + ';\n          border-color: ' + activeBorder + ';\n      /* Remove the gradient for the pressed/active state */\n      background-image: none;\n    ' + boxShadow(enableShadows, btnActiveBoxShadow) + ';\n  \n      &:hover,\n      &:focus,\n      &.focus {\n        color: ' + buttonColor + ';\n        background-color: ' + color(background).darken(0.17).toString() + ';\n            border-color: ' + color(border).darken(0.25).toString() + ';\n      }\n    }\n  \n    &.disabled,\n    &:disabled {\n      &:focus,\n      &.focus {\n        background-color: ' + background + ';\n            border-color: ' + border + ';\n      }\n      ' + hover('\n        background-color: ' + background + ';\n            border-color: ' + border + ';\n      ') + '\n    }\n  ';
}

export function buttonOutlineVariant(buttonColor) {
  var buttonColorHover = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#fff';

  return '\n    color: ' + buttonColor + ';\n    background-image: none;\n    background-color: transparent;\n    border-color: ' + buttonColor + ';\n  \n    ' + hover('\n      color: ' + buttonColorHover + ';\n      background-color: ' + buttonColor + ';\n          border-color: ' + buttonColor + ';\n    ') + '\n  \n    &:focus,\n    &.focus {\n      color: ' + buttonColorHover + ';\n      background-color: ' + buttonColor + ';\n          border-color: ' + buttonColor + ';\n    }\n  \n    &:active,\n    &.active,\n    & .open > &.dropdown-toggle {\n      color: ' + buttonColorHover + ';\n      background-color: ' + buttonColor + ';\n          border-color: ' + buttonColor + ';\n  \n      &:hover,\n      &:focus,\n      &.focus {\n        color: ' + buttonColorHover + ';\n        background-color: ' + color(buttonColor).darken(0.17).toString() + ';\n            border-color: ' + color(buttonColor).darken(0.25).toString() + ';\n      }\n    }\n  \n    &.disabled,\n    &:disabled {\n      &:focus,\n      &.focus {\n        border-color: ' + color(buttonColor).lighten(0.2).toString() + ';\n      }\n      ' + hover('\n        border-color: ' + color(buttonColor).lighten(0.2).toString() + ';\n      ') + '\n    }\n  ';
}

// Button sizes
export function buttonSize() {
  var enableRounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps['$enable-rounded'];
  var paddingY = arguments[1];
  var paddingX = arguments[2];
  var fontSize = arguments[3];
  var btnBorderRadius = arguments[4];

  return '\n    padding: ' + paddingY + ' ' + paddingX + ';\n    font-size: ' + fontSize + ';\n    ' + borderRadius(enableRounded, btnBorderRadius) + '\n  ';
}

export function button($enableShadows, $enableHoverMediaQuery, $enableTransitions, $enableRounded, $btnFontWeight, $btnLineHeight, $btnTransition, $inputBtnBorderWidth, $btnPaddingX, $btnPaddingY, $fontSizeBase, $btnBorderRadius, $btnActiveBoxShadow, $cursorDisabled, $linkColor, $linkHoverColor, $linkHoverDecoration, $btnLinkDisabledColor, $btnPaddingXLg, $btnPaddingYLg, $fontSizeLg, $btnBorderRadiusLg, $btnPaddingXSm, $btnPaddingYSm, $fontSizeSm, $btnBorderRadiusSm, $btnBlockSpacingY, $btnPrimaryColor, $btnPrimaryBg, $btnPrimaryBorder, $btnSecondaryColor, $btnSecondaryBg, $btnSecondaryBorder, $btnInfoColor, $btnInfoBg, $btnInfoBorder, $btnSuccessColor, $btnSuccessBg, $btnSuccessBorder, $btnWarningColor, $btnWarningBg, $btnWarningBorder, $btnDangerColor, $btnDangerBg, $btnDangerBorder) {
  return '\n/*\n     Base styles\n    */\n    font-family: inherit;\n\n    &.btn {\n      /* Adapt the colors based on primary prop */\n      display: inline-block;\n      font-weight: ' + $btnFontWeight + ';\n      line-height: ' + $btnLineHeight + ';\n      text-align: center;\n      white-space: nowrap;\n      vertical-align: middle;\n      user-select: none;\n      border: ' + $inputBtnBorderWidth + ' solid transparent;\n      ' + buttonSize($enableRounded, $btnPaddingY, $btnPaddingX, $fontSizeBase, $btnBorderRadius) + '\n      ' + transition($enableTransitions, $btnTransition) + '\n     \n      &,\n      &:active,\n      &.active {\n        &:focus,\n        &.focus {\n          ' + tabFocus() + '\n        }\n      }\n     \n      ' + hoverFocus($enableHoverMediaQuery, '\n          text-decoration: none;\n          &.focus {\n            text-decoration: none;\n          }\n        ') + ';\n     \n      &:active,\n      &.active {\n        background-image: none;\n        outline: 0;\n        ' + boxShadow($enableShadows, $btnActiveBoxShadow) + '\n      }\n     \n      &.disabled,\n      &:disabled {\n        cursor: ' + $cursorDisabled + ';\n        opacity: .65;\n        ' + boxShadow($enableShadows, 'none') + '\n      }\n    }   \n \n    /* Future-proof disabling of clicks on a elements */\n    a.btn.disabled,\n    fieldset[disabled] a.btn {\n      pointer-events: none;\n    }\n   \n   \n    /* Alternate buttons */\n   \n    &.btn-primary {\n      ' + buttonVariant($enableHoverMediaQuery, $btnPrimaryColor, $btnPrimaryBg, $btnPrimaryBorder) + '\n    }\n    &.btn-secondary {\n      ' + buttonVariant($enableHoverMediaQuery, $btnSecondaryColor, $btnSecondaryBg, $btnSecondaryBorder) + '\n    }\n    &.btn-info {\n      ' + buttonVariant($enableHoverMediaQuery, $btnInfoColor, $btnInfoBg, $btnInfoBorder) + '\n    }\n    &.btn-success {\n      ' + buttonVariant($enableHoverMediaQuery, $btnSuccessColor, $btnSuccessBg, $btnSuccessBorder) + '\n    }\n    &.btn-warning {\n      ' + buttonVariant($enableHoverMediaQuery, $btnWarningColor, $btnWarningBg, $btnWarningBorder) + '\n    }\n    &.btn-danger {\n      ' + buttonVariant($enableHoverMediaQuery, $btnDangerColor, $btnDangerBg, $btnDangerBorder) + '\n    }\n   \n   /* Remove all backgrounds */\n\n    &.btn-outline-primary{\n      ' + buttonOutlineVariant($btnPrimaryBg) + '\n    }    \n    &.btn-outline-secondary{\n      ' + buttonOutlineVariant($btnSecondaryBorder) + '\n    }    \n    &.btn-outline-info{\n      ' + buttonOutlineVariant($btnInfoBg) + '\n    }    \n    &.btn-outline-success{\n      ' + buttonOutlineVariant($btnSuccessBg) + '\n    }\n    &.btn-outline-warning{\n      ' + buttonOutlineVariant($btnWarningBg) + '\n    }\n    &.btn-outline-danger{\n      ' + buttonOutlineVariant($btnDangerBg) + '\n    }\n   \n    /*\n     Link buttons\n    */\n   \n    /* Make a button look and behave like a link */\n    &.btn-link {\n      font-weight: normal;\n      color: ' + $linkColor + ';\n      border-radius: 0;\n   \n      &,\n      &:active,\n      &.active,\n      &:disabled {\n        background-color: transparent;\n        ' + boxShadow($enableShadows, 'none') + '\n      }\n     \n      &,\n      &:focus,\n      &:active {\n        border-color: transparent;\n      }\n     \n      ' + hover('\n        border-color: transparent;\n      ') + '\n     \n      ' + hoverFocus($enableHoverMediaQuery, '\n          color: ' + $linkHoverColor + ';\n          text-decoration: ' + $linkHoverDecoration + ';\n          background-color: transparent;\n        ') + '\n     \n      &:disabled {\n        ' + hoverFocus($enableHoverMediaQuery, '\n            color: ' + $btnLinkDisabledColor + ';\n            text-decoration: none;\n          ') + '\n      }\n    }\n   \n    /*\n     Button Sizes\n    */\n   \n    &.btn-lg {\n      /* line-height: ensure even-numbered height of button next to large input */\n      ' + buttonSize($enableRounded, $btnPaddingYLg, $btnPaddingXLg, $fontSizeLg, $btnBorderRadiusLg) + '\n    }\n   \n    &.btn-sm {\n      /* line-height: ensure proper height of button next to small input */\n      ' + buttonSize($enableRounded, $btnPaddingYSm, $btnPaddingXSm, $fontSizeSm, $btnBorderRadiusSm) + '\n    }\n   \n   \n    /*\n     Block button\n    */\n   \n    &.btn-block {\n      display: block;\n      width: 100%;\n    }\n   \n    /* Vertically space out multiple block buttons */\n    &.btn-block + .btn-block {\n      margin-top: ' + $btnBlockSpacingY + ';\n    }\n   \n    /* Specificity overrides */\n    input[type="submit"],\n    input[type="reset"],\n    input[type="button"] {\n      &.btn-block {\n        width: 100%;\n      }\n    }\n   \n    /* Reboot Scss */\n    touch-action: manipulation;\n    /* Normalize includes font: inherit;, so font-family. font-size, etc are */\n    /* properly inherited. However, line-height is not inherited there. */\n    line-height: inherit;\n    &:focus{\n      outline: 1px dotted;\n      outline: 5px auto -webkit-focus-ring-color;\n    }\n    \n    &[type="button"],\n    &[type="reset"],\n    &[type="submit"] {\n      -webkit-appearance: button;\n    }\n    \n    &::-moz-focus-inner,\n    &[type="button"]::-moz-focus-inner,\n    &[type="reset"]::-moz-focus-inner,\n    &[type="submit"]::-moz-focus-inner {\n      padding: 0;\n      border-style: none;\n    }\n\n  ';
}

export default {
  defaultProps: defaultProps,
  buttonVariant: buttonVariant,
  buttonOutlineVariant: buttonOutlineVariant,
  buttonSize: buttonSize,
  button: button
};